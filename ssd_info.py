import subprocess
import re
import json


def print_table(stats: dict) -> None:
    """
    –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ.

    :param stats: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.
    """
    print("\n" + "="*45)
    print("üíæ –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –î–ò–°–ö–ê".center(45))
    print("="*45, end="")
    print("\n| {:<21} | {:<17} |".format('–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'))
    print("-" * 45)
    for param, value in stats.items():
        print("| {:<21} | {:<17} |".format(param, value))
    print("-" * 45)


def parse_nvme_stats(json_data: str) -> dict:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ ssd/
    
    :param json_data: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏.
    """

    stats = json.loads(json_data)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏–∑ –ö–µ–ª—å–≤–∏–Ω–æ–≤ –≤ –¶–µ–ª—å—Å–∏–∏
    temp_c = stats['temperature'] - 273

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    # (1 unit = 1000 sectors, sector = 512 bytes -> ~0.5MB)
    written_tb = round(stats['data_units_written'] * 1000 * 512 / (1024**4), 2)

    return {
        "–ò–∑–Ω–æ—Å SSD": f"{stats['percent_used']}%",
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": f"{temp_c}¬∞C",
        "–û—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–µ—Å—É—Ä—Å": f"{stats['avail_spare']}%",
        "–ó–∞–ø–∏—Å–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö": f"{written_tb} TB",
        "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã": f"{
            stats['power_on_hours']
            }(—á)/{int(stats['power_on_hours']) // 24}(–¥–Ω)",
        "–¶–∏–∫–ª–æ–≤ –≤–∫–ª—é—á–µ–Ω–∏—è": stats['power_cycles'],
        "–ê–≤–∞—Ä–∏–π–Ω—ã–µ –≤—ã–∫–ª—é—á–µ–Ω–∏—è": stats['unsafe_shutdowns'],
        "–û—à–∏–±–∫–∏ –Ω–æ—Å–∏—Ç–µ–ª—è": stats['media_errors']
    }


def get_root_disk() -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º
    —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞.
    """
    root_disk = subprocess.run(
            "df --output=source /",
            shell=True,
            capture_output=True,
            text=True
        ).stdout.splitlines()[1]
    return re.sub(r"n\d+p\d+$", "", root_disk)


def main():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ ssd. –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ
    –¥–∏—Å–∫–∏ nvme.
    """
    try:
        disk = get_root_disk()
        print(f"–ê–Ω–∞–ª–∏–∑ SSD: {disk}")

        result = subprocess.run(
            f"sudo nvme smart-log {disk} --output-format=json",
            shell=True,
            text=True,
            capture_output=True
        )

        if result.returncode != 0:
            raise Exception(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {result.stderr}")

        stats = parse_nvme_stats(result.stdout)

        print_table(stats=stats)

    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON-–¥–∞–Ω–Ω—ã–µ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
